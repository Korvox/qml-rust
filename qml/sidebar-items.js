initSidebarItems({"enum":[["QMetaType","Analogue of `Qt::QMetaType::Type`"]],"macro":[["Q_LISTMODEL","Generates a wrapper for `QListModel` for static typing and easier management."],["Q_OBJECT","Marks the structure to be able to be used in Qt meta-object system."],["Q_REGISTERABLE_QML","Provides definitions for a type that can be used from QML."],["Q_REGISTER_QML","Registers a type as a QML type."],["Q_REGISTER_SINGLETON_QML","Registers a type as a singleton type in QML."],["qvarlist","Eases forming of `QVariantList` (`QVariant` of array)."]],"struct":[["QListModel","Allows providing a custom model to QML"],["QVariant","This holds a value to be providen for a QML context."],["QVariantList","A wrapper around `Vec<QVariant>`, that is supposed to be used in `Q_OBJECT!` properties. It is only needed because of macro restrictions in current stable Rust. # Examples ``` # #[macro_use] extern crate qml; # use qml::*; # #[allow(unused_variables)] # fn main() { let shortcut: QVariantList = qvarlist![[\"John\", [2, 2]], [\"Ivan\", [10, 0]], [\"Mary\", [0, 1]]].into(); # } ``` ``` # #[macro_use] extern crate qml; # use qml::*; pub struct Example;"],["QmlEngine","Provides an entry point for building QML applications from Rust"]],"trait":[["QMetaTypable","Provides an associated variant of enum for a type."]]});